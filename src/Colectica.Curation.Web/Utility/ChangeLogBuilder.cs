// Copyright 2014 - 2018 Colectica.
// 
// This file is part of the Colectica Curation Tools.
// 
// The Colectica Curation Tools are free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// The Colectica Curation Tools are distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
// 
// You should have received a copy of the GNU Affero General Public License along
// with Colectica Curation Tools. If not, see <https://www.gnu.org/licenses/>.

ï»¿using Colectica.Curation.Data;
using MigraDoc.DocumentObjectModel;
using MigraDoc.DocumentObjectModel.Fields;
using MigraDoc.Rendering;
using PdfSharp.Pdf;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Colectica.Curation.Web.Utility
{
    public class ChangeLogBuilder
    {
        private Document document;

        public byte[] BuildPdf(CatalogRecord record, List<Event> events)
        {
            // Create a new MigraDoc document
            document = new Document();
            document.Info.Title = record.Title;
            document.Info.Comment = "Generated by Colectica";

            InitializeStyles(document);

            var section = document.AddSection();

            // Header
            var header = section.Headers.Primary.AddParagraph();
            header.Format.Borders.Bottom.Width = 1;
            header.Format.Alignment = ParagraphAlignment.Right;

            if (!string.IsNullOrWhiteSpace(record.Title))
            {
                header.AddText(record.Title + " change log");
                header.AddTab();
            }

            // Footer
            var footer = section.Footers.Primary.AddParagraph();
            footer.Format.Borders.Top.Width = 1;
            footer.Format.Alignment = ParagraphAlignment.Right;

            footer.AddPageField();
            footer.AddSpace(1);
            footer.AddText("of");
            footer.AddSpace(1);
            footer.AddNumPagesField();

            // Title
            var headerParagraph = section.AddParagraph(record.Title, "Heading1");

            // Basic information
            AddProperty("Creator", record.CreatedBy.FullName);
            AddProperty("Version", record.Version.ToString());

            if (record.LastUpdatedDate.HasValue)
            {
                AddProperty("Last Updated", record.LastUpdatedDate.Value.ToLongDateString() + " " + record.LastUpdatedDate.Value.ToShortTimeString());
            }

            // Change log
            section.AddParagraph("Change History", "Heading2");

            // Table with time, name, title, and details
            // In details cell, include file name
            // image

            var table = section.AddTable();
            table.AddColumn("4cm");
            table.AddColumn("4cm");
            table.AddColumn("12cm");

            foreach (var item in events)
            {
                var row = table.AddRow();
                
                row.Cells[0].AddParagraph(item.Timestamp.ToString());

                row.Cells[1].AddParagraph(item.User.Email);

                row.Cells[2].AddParagraph(item.Title);

                foreach (var file in item.RelatedManagedFiles)
                {
                    row.Cells[2].AddParagraph("File: " + file.Name);
                }

                if (!string.IsNullOrWhiteSpace(item.Details))
                {
                    row.Cells[2].AddParagraph(item.Details);
                }
            }


            // Render the document.
            var pdfRenderer = new PdfDocumentRenderer(true, PdfFontEmbedding.Always);
            pdfRenderer.Document = document;
            pdfRenderer.RenderDocument();

            using (var stream = new MemoryStream())
            {
                pdfRenderer.Save(stream, true);
                var fileContents = stream.ToArray();

                return fileContents;
            }

        }

        void AddProperty(string key, string value)
        {
            document.LastSection.AddParagraph(key + ": " + value);
        }

        public static void InitializeStyles(Document doc)
        {
            doc.DefaultPageSetup.PageFormat = PageFormat.Letter;

            Style normal = doc.Styles["Normal"];
            normal.ParagraphFormat.SpaceAfter = 6;
            normal.ParagraphFormat.OutlineLevel = OutlineLevel.BodyText;
            normal.Font.Name = "Constantia";
            normal.Font.Size = Unit.FromPoint(10);

            Style h1 = doc.Styles["Heading1"];
            h1.Font.Name = "Calibri";
            h1.ParagraphFormat.Shading.Clear();
            h1.ParagraphFormat.OutlineLevel = OutlineLevel.Level1;
            h1.ParagraphFormat.KeepWithNext = true;
            h1.ParagraphFormat.SpaceBefore = 3;
            h1.ParagraphFormat.SpaceAfter = 5;
            h1.ParagraphFormat.Font.Bold = true;
            h1.Font.Size = Unit.FromPoint(26);
            //h1.ParagraphFormat.LineSpacing = Unit.FromPoint(42);

            Style h2 = doc.Styles["Heading2"];
            h2.Font.Name = "Calibri";
            h2.ParagraphFormat.Shading.Clear();
            h2.ParagraphFormat.KeepWithNext = true;
            h2.ParagraphFormat.OutlineLevel = OutlineLevel.Level2;
            h2.ParagraphFormat.SpaceBefore = 3;
            h2.ParagraphFormat.SpaceAfter = 5;
            h2.ParagraphFormat.Font.Bold = true;
            h2.Font.Size = Unit.FromPoint(18);

            Style h3 = doc.Styles["Heading3"];
            h3.Font.Name = "Calibri";
            h3.ParagraphFormat.Shading.Clear();
            h3.ParagraphFormat.KeepWithNext = true;
            h3.ParagraphFormat.KeepTogether = true;
            h3.ParagraphFormat.OutlineLevel = OutlineLevel.Level3;
            h3.ParagraphFormat.SpaceBefore = 3;
            h3.ParagraphFormat.SpaceAfter = 5;
            h3.ParagraphFormat.Font.Bold = true;
            h3.Font.Size = Unit.FromPoint(14);

            Style h4 = doc.Styles["Heading4"];
            h4.Font.Name = "Calibri";
            h4.ParagraphFormat.Shading.Clear();
            h4.ParagraphFormat.OutlineLevel = OutlineLevel.Level4;
            h4.ParagraphFormat.Font.Bold = true;
            h4.Font.Size = Unit.FromPoint(12);

            Style h5 = doc.Styles["Heading5"];
            h5.Font.Name = "Calibri";
            h5.ParagraphFormat.Shading.Clear();
            h5.ParagraphFormat.OutlineLevel = OutlineLevel.Level5;
            h5.ParagraphFormat.Font.Bold = true;
            h5.Font.Size = Unit.FromPoint(10);

            Style h6 = doc.Styles["Heading6"];
            h6.Font.Name = "Calibri";
            h6.ParagraphFormat.Shading.Clear();
            h6.ParagraphFormat.OutlineLevel = OutlineLevel.Level6;
            h6.ParagraphFormat.Font.Bold = false;
            h6.ParagraphFormat.Font.Italic = true;
            h6.Font.Size = Unit.FromPoint(10);

            Style link = doc.Styles["Hyperlink"];
            link.Font.Color = new Color(0, 136, 204);
            link.Font.Underline = Underline.None;

            Style list = doc.Styles["List"];
            list.ParagraphFormat.AddTabStop(Unit.FromCentimeter(.25));

            Style toc = doc.Styles.AddStyle("TOC", "Normal");
            toc.Font.Size = 8;
            //toc.ParagraphFormat.AddTabStop("2cm", TabAlignment.Left, TabLeader.Dots);
            toc.ParagraphFormat.AddTabStop("12cm", TabAlignment.Right, TabLeader.Dots);
        }
    }
}
